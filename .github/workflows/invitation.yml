name: Organization Invitation Workflow

on:
  issues:
    types: [labeled]

jobs:
  automate_invite:
    runs-on: ubuntu-latest
    if: github.event.label.name == 'membership'
    steps:
      - name: Invite on label
        id: invite
        uses: vj-abigo/invite-on-label@v1.4
        continue-on-error: true
        with:
          organization: "OpenSaucedHub"
          label: membership
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          comment: |
            üëã Welcome to Open Source Hub! üéâ

            Your invitation to join the organization has been sent. Here's what to do next:

            1. Check your email for the invitation
            2. After accepting, make your membership public by visiting: https://github.com/orgs/OpenSaucedHub/people
            3. Find your name and change the visibility dropdown to "Public"

            We're excited to have you as part of our community! üöÄ
        env:
          INVITE_TOKEN: ${{ secrets.INVITE_TOKEN }}

      - name: Handle existing member
        if: steps.invite.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: '‚ö†Ô∏è It seems you are already a member of the organization! If you need to make your membership public, please visit: https://github.com/orgs/OpenSaucedHub/people'
            });

      - name: Update labels
        if: success() || steps.invite.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const issue = context.payload.issue;
            await github.rest.issues.removeLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              name: 'membership'
            });
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              labels: ['invited']
            });
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue.number,
              state: 'closed'
            });
